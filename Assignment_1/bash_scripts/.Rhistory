knitr::opts_chunk$set(echo = TRUE)
library(doParallel)
data <- read.csv("HT-Table11-P1-randomised.csv", header=TRUE)
grid <- matrix(1, 65, 60, byrow=TRUE)
grid_height <- nrow(grid)
grid_width <- ncol(grid)
bottom_left <- FALSE #True if bottom-left-algorithm
n_populations <- 5
setBox <- function(box){
#Set box properties
box_height <- ncol(box)
box_width <- nrow(box)
box_placed <- FALSE
#Iterate from bottom of grid
for(row in grid_height:1){
#Iterate from first col
for(col in 1:grid_width){
#Check if box is too wide
sum <- sum(grid[row, ])
if(sum < box_width){
#break
if(sum < box_height ){
break
}
else{
box <- t(box)
box_height <- ncol(box)
box_width <- nrow(box)
}
}
if( (grid_width+1) %in% c(col:(col+box_width-1)) ){
break
}
#If current box fits in sub-matrix
if(all(grid[row:(row-box_height+1), col:(col+box_width-1)] == 1)){
#If bottom left activated
if( bottom_left & !all(grid[row:1, col:(col+box_width-1)] == 1)){
#Break if lowest 'available' position is not within reach
break
}
#Place box
grid[row:(row-box_height+1), col:(col+box_width-1)] <- box
box_placed <- TRUE
break
}
}
#Break if box is placed
if( box_placed ){
break
}
}
return(grid)
}
main <- function() {
for(i in c(f[,1])){
box <- matrix(0, data[i,1], data[i,2])
grid <<- setBox(box)
}
height <- nrow(grid) - min(which(rowSums(grid==1) != ncol(grid))) + 1
cat(sprintf("Height: %s\n", height))
cat(sprintf("Current area of grid covered: %s\n", sum(colSums(grid == 0))))
cat(sprintf("Total area of boxes from file: %s\n", sum(data[,1]*data[,2])))
}
set.seed(200)
this_pop <- list()
for( i in 1:n_populations){
d <- c()
for( j in 1:nrow(data)){
if( runif(1) > 0.5){
d <- c(d, -j)
}else{
d <- c(d, j)}
}
this_pop[[i]] <- sample(d)
}
heights <- c()
#Evalutate population by height
evaluate_pop <- function(pop){
popsize <- length(pop[[1]])
varsize <- length(pop)
min_height <- 35
evals <- rep(0, varsize)
parents <- rep(0, varsize)
for(i in 1:varsize){
for( j in 1:popsize){
ind <- abs(pop[[i]][j])
box <- matrix(0, data[ind,1], data[ind,2])
if(pop[[i]][j] < 0){
box <- t(box)
}
grid <<- setBox(box)
}
height <- calculateHeight()
if(height < min_height){
min_height <- height
print(sprintf("Current min height: %s", height))
}
#Check if current generation is better
if( height < 33 ){
print(sprintf("Height: %s", height))
if(height == 30 ){
print("OPTIMAL SOLUTION")
write.csv(pop[,i], file = "opt_seq.csv")
write.csv(grid, file = "opt_grid.csv")
quit()
}
#quit()
}
evals[i] <- height
parents[i] <- i
grid <<- matrix(1, 65, 60, byrow=TRUE)
}
print(mean(evals))
heights <<- c(heights, mean(evals))
#print(evals)
p <- (0.985^(evals))
p <- penalize(p)
return (sample(1:varsize, varsize, replace=TRUE, prob=p))
}
#Penalize the worst n/2 in population
penalize <- function(evals){
n <- rev(sort(evals))
for( i in 1:round(0.1*n_populations) ){
index <- which(evals == n[i])
evals[index] <- evals[index] + 0.15
}
#evals[max(evals)] <- 1.0
return (evals)
}
#Create children from parent population
reproduce <- function(parents){
for( i in seq(1, n_populations, 2) ){
cycle_start <- index <- sample(c(1:28), 1);
parent <- sample(1:n_populations, 1)
parent_one <- c(unlist(this_pop[parents[[i]]]))
parent_two <- c(unlist(this_pop[parents[[parent]]]))
value <- 0
start_value <- abs(parent_one[index])
edit <- c()
while(TRUE){
if( value == start_value){
value <- abs(parent_two[index])
index <- which(abs(parent_one) == value)
break
}
value <- abs(parent_two[index])
index <- which(abs(parent_one) == value)
edit <- c(edit, index)
}
temp <- parent_one
for( s in edit ){
parent_one <- replace(parent_one, s, parent_two[s])
parent_two <- replace(parent_two, s, temp[s])
}
if( (length(unique(abs(parent_one))) != 28) | (length(unique(abs(parent_two))) != 28)) {
print("Wooah")
quit()
}
this_pop[[i]] <<- parent_one
this_pop[[parent]] <<- parent_two
}
return(this_pop)
}
reproduce_2 <- function(parents){
for( i in 1:(n_populations/2) ){
cycle_start_bool <- FALSE; cycle_start <- 1; index <- 1; remove <- c()
index <- 2
parent_one <- c(unlist(this_pop[parents[[i]]]))
parent_two <- c(unlist(this_pop[parents[[i+1]]]))
value_parent_one <- parent_one[index]
value_parent_two <- parent_two[index]
parent_one <- replace(parent_one, c(index, which(parent_one == value_parent_two)), parent_one[c(which(parent_one == value_parent_two), index)])
parent_two <- replace(parent_two, c(index, which(parent_two == value_parent_one)), parent_two[c(which(parent_two == value_parent_one), index)])
if( (length(unique(abs(parent_one))) != 28) | (length(unique(abs(parent_two))) != 28)) {
print("Wooah")
quit()
}
this_pop[[i]] <<- parent_one
this_pop[[parent]] <<- parent_two
}
return (this_pop)
}
#Mutate with a 10% chance
mutate <- function(pop){
for( i in 1:n_populations ){
if(runif(1) > 0.9){
d <- c()
for( j in 1:nrow(data)){
if( runif(1) > 0.5){
d <- c(d, -j)
}else{
d <- c(d, j)}
}
pop[[i]] <- d
return(pop)
}}
return (pop)
}
calculateHeight <- function(){
return (nrow(grid) - min(which(rowSums(grid==1) != ncol(grid))) + 1)
}
run <- function(){
n_runs <- 10000
pop <- this_pop
for(i in 1:n_runs){
parents <- evaluate_pop(pop)
pop <- reproduce(parents)
pop <- mutate(pop)
}
plot(heights,type="l")}
run()
